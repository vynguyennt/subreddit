import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const initialState = {
  listing: [],
  after: "",
  status: "loading",
};

function fetchSubreddit(name, sortBy = "hot", after) {
  let url = `https://www.reddit.com/r/${name}/${sortBy}.json` + (after ? `?after=${after}` : "")
  return fetch(url)
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchData = createAsyncThunk(
  "subreddit/fetchData",
  async ({sortBy = 'hot', after = ''}) => {
    const response = await fetchSubreddit("healthyfood", sortBy, after);
    // The value we return becomes the `fulfilled` action payload
    console.log(response)
    return response.data;
  }
);

export const subredditSlice = createSlice({
  name: "subreddit",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateVote: (state, action) => {
      if (action.payload && action.payload.name && action.payload.vote != undefined) {
        let listing = JSON.parse(JSON.stringify(state.listing))
        let post = listing.find(p => p.name == action.payload.name)
        post.ups = action.payload.vote
        state.listing = listing
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchData.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchData.fulfilled, (state, action) => {
        state.status = "loaded";
        // if (action.payload.children && action.payload.children.length) {
        //   state.listing = state.listing.concat(action.payload.children);
        //   state.after = action.payload.after;
        // }
      });
  },
});

export const { updateVote } = subredditSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.subreddit.value)`
export const selectListing = (state) => state.subreddit.listing;
export const selectAfter = (state) => state.subreddit.after;

export default subredditSlice.reducer;
