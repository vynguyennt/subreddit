import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import reddit from "../common/utils/reddit";

const initialState = {
  listing: [],
  after: "",
  sortBy: "hot",
  sortTime: "day",
  status: "unload",
  errorMsg: "",
};

function getErrorMsg(errorCode) {
  switch (errorCode) {
    case 404:
      return "Sorry, there arenâ€™t any communities on Reddit with that name.";
    default:
      return "Something went wrong...";
  }
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchSubreddit = createAsyncThunk(
  "subreddit/fetchSubreddit",
  async ({ name = "", sortBy = "hot", after = "", time = "" }) => {
    let subreddit = reddit[sortBy](name).limit(25);
    if (time) {
      // time could be one of (hour, day, week, month, year, all)
      subreddit = subreddit.t(time);
    }
    if (after) {
      subreddit = subreddit.after(after);
    }
    const response = await subreddit.fetch();
    if (after === "") response.data.reset = true;
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const subredditSlice = createSlice({
  name: "subreddit",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateArticleVote: (state, action) => {
      if (
        action.payload &&
        action.payload.id &&
        action.payload.voteType !== undefined
      ) {
        let listing = JSON.parse(JSON.stringify(state.listing));
        let post = listing.find((p) => p.id === action.payload.id);
        if (post) {
          post.ups = action.payload.voteCount;
          post.likes = action.payload.voteType;
          state.listing = listing;
        }
      }
    },
    updateSortBy: (state, action) => {
      if (action.payload) {
        state.sortBy = action.payload;
      }
    },
    updateSortTime: (state, action) => {
      if (action.payload) {
        state.sortTime = action.payload;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchSubreddit.pending, (state) => {
        state.status = "loading";
        state.errorMsg = "";
      })
      .addCase(fetchSubreddit.fulfilled, (state, action) => {
        state.status = "loaded";
        if (action.payload.children && action.payload.children.length) {
          if (action.payload.reset) {
            state.listing = action.payload.children.map((child) => child.data);
          } else {
            state.listing = state.listing.concat(
              action.payload.children.map((child) => child.data)
            );
          }
          state.after = action.payload.after;
        } else if (action.payload && action.payload.error) {
          state.errorMsg = getErrorMsg(action.payload.error);
        } else {
          state.errorMsg = getErrorMsg(404);
        }
      })
      .addCase(fetchSubreddit.rejected, (state, action) => {
        state.status = "error";
        state.errorMsg = getErrorMsg(404);
      });
  },
});

export const { updateArticleVote, updateSortBy, updateSortTime } =
  subredditSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.subreddit.value)`
export const selectListing = (state) => state.subreddit.listing;
export const selectListAfter = (state) => state.subreddit.after;
export const selectListSortBy = (state) => state.subreddit.sortBy;
export const selectListSortTime = (state) => state.subreddit.sortTime;
export const selectListLoadingStatus = (state) => state.subreddit.status;
export const selectErrorMsg = (state) => state.subreddit.errorMsg;

export default subredditSlice.reducer;
