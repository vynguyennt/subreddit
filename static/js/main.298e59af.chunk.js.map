{"version":3,"sources":["store/subredditSlice.js","common/vote/UpArrow.js","common/vote/DownArrow.js","common/vote/Vote.js","common/post/Post.js","pages/search/SearchPage.js","pages/thread/ThreadPage.js","App.js","store/store.js","serviceWorker.js","index.js"],"names":["fetchSubreddit","name","sortBy","after","url","fetch","fetchData","createAsyncThunk","a","response","console","log","data","subredditSlice","createSlice","initialState","listing","status","reducers","updateVote","state","action","payload","undefined","vote","JSON","parse","stringify","find","p","ups","extraReducers","builder","addCase","pending","fulfilled","selectListing","actions","subreddit","selectAfter","UpArrow","className","x","y","viewBox","style","enableBackground","d","fill","stroke","strokeWidth","DownArrow","Vote","voteCount","voteStatus","useState","updateStatus","count","updateCount","handleVote","e","currentTarget","onClick","defaultProps","Post","title","type","SearchPage","useSelector","dispatch","useDispatch","useEffect","map","post","ThreadPage","App","path","exact","store","configureStore","reducer","subredditReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.298e59af.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  listing: [],\n  after: \"\",\n  status: \"loading\",\n};\n\nfunction fetchSubreddit(name, sortBy = \"hot\", after) {\n  let url = `https://www.reddit.com/r/${name}/${sortBy}.json` + (after ? `?after=${after}` : \"\")\n  return fetch(url)\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const fetchData = createAsyncThunk(\n  \"subreddit/fetchData\",\n  async ({sortBy = 'hot', after = ''}) => {\n    const response = await fetchSubreddit(\"healthyfood\", sortBy, after);\n    // The value we return becomes the `fulfilled` action payload\n    console.log(response)\n    return response.data;\n  }\n);\n\nexport const subredditSlice = createSlice({\n  name: \"subreddit\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updateVote: (state, action) => {\n      if (action.payload && action.payload.name && action.payload.vote != undefined) {\n        let listing = JSON.parse(JSON.stringify(state.listing))\n        let post = listing.find(p => p.name == action.payload.name)\n        post.ups = action.payload.vote\n        state.listing = listing\n      }\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchData.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchData.fulfilled, (state, action) => {\n        state.status = \"loaded\";\n        // if (action.payload.children && action.payload.children.length) {\n        //   state.listing = state.listing.concat(action.payload.children);\n        //   state.after = action.payload.after;\n        // }\n      });\n  },\n});\n\nexport const { updateVote } = subredditSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.subreddit.value)`\nexport const selectListing = (state) => state.subreddit.listing;\nexport const selectAfter = (state) => state.subreddit.after;\n\nexport default subredditSlice.reducer;\n","export default function UpArrow({className}) {\r\n\treturn (\r\n\t\t<svg x=\"0px\" y=\"0px\" viewBox=\"0 -20 512.171 552.171\" style={{enableBackground: 'new 0 0 512.171 552.171'}} className={className}>\r\n\t\t\t<g>\r\n\t\t\t\t<g>\r\n\t\t\t\t\t<path d=\"M476.723,216.64L263.305,3.115C261.299,1.109,258.59,0,255.753,0c-2.837,0-5.547,1.131-7.552,3.136L35.422,216.64\r\n\t\t\t\t\t\tc-3.051,3.051-3.947,7.637-2.304,11.627c1.664,3.989,5.547,6.571,9.856,6.571h117.333v266.667c0,5.888,4.779,10.667,10.667,10.667\r\n\t\t\t\t\t\th170.667c5.888,0,10.667-4.779,10.667-10.667V234.837h116.885c4.309,0,8.192-2.603,9.856-6.592\r\n\t\t\t\t\t\tC480.713,224.256,479.774,219.691,476.723,216.64z\" fill=\"transparent\" stroke=\"#878a8c\" strokeWidth=\"40\" />\r\n\t\t\t\t</g>\r\n\t\t\t</g>\r\n\t\t\t<g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\r\n\t\t</svg>\r\n\t)\r\n}","export default function DownArrow({className}) {\r\n\treturn (\r\n\t\t<svg x=\"0px\" y=\"0px\" viewBox=\"0 -20 512.171 552.171\" style={{enableBackground: 'new 0 0 512.171 552.171'}}  className={className}>\r\n\t\t\t<g>\r\n\t\t\t\t<g>\r\n\t\t\t\t\t<path d=\"M479.046,283.925c-1.664-3.989-5.547-6.592-9.856-6.592H352.305V10.667C352.305,4.779,347.526,0,341.638,0H170.971\r\n\t\t\t\t\t\tc-5.888,0-10.667,4.779-10.667,10.667v266.667H42.971c-4.309,0-8.192,2.603-9.856,6.571c-1.643,3.989-0.747,8.576,2.304,11.627\r\n\t\t\t\t\t\tl212.8,213.504c2.005,2.005,4.715,3.136,7.552,3.136s5.547-1.131,7.552-3.115l213.419-213.504\r\n\t\t\t\t\t\tC479.793,292.501,480.71,287.915,479.046,283.925z\" fill=\"transparent\" stroke=\"#878a8c\" strokeWidth=\"40\" />\r\n\t\t\t\t</g>\r\n\t\t\t</g>\r\n\t\t\t<g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport UpArrow from \"./UpArrow\";\nimport DownArrow from \"./DownArrow\";\nimport './Vote.css'\n\nfunction Vote({ voteCount, voteStatus, updateVote }) {\n  let [status, updateStatus] = useState(voteStatus)\n  let [count, updateCount] = useState(voteCount)\n  function handleVote(e) {\n    if (e.currentTarget.name === 'upvote') {\n      switch(status) {\n        case -1: \n          updateStatus(1)\n          updateCount(count + 2)\n          updateVote(1)\n          break\n        case 0:\n          updateStatus(1)\n          updateCount(count + 1)\n          updateVote(1)\n          break\n        case 1:\n          updateStatus(0)\n          updateCount(count -1)\n          updateVote(0)\n          break\n        default:\n      }\n    } else if (e.currentTarget.name === 'downvote') {\n      switch(status) {\n        case -1: \n          updateStatus(0)\n          updateCount(count + 1)\n          updateVote(0)\n          break\n        case 0:\n          updateStatus(-1)\n          updateCount(count - 1)\n          updateVote(-1)\n          break\n        case 1:\n          updateStatus(-1)\n          updateCount(count - 2)\n          updateVote(-1)\n          break\n        default:\n      }\n    }\n  }\n\n  return (\n    <div className={'vote ' + (status === -1 ? 'downvoted' : (status === 1) ? 'upvoted' : '')}>\n      <button className=\"vote-btn\" name=\"upvote\" onClick={handleVote}>\n        <UpArrow className=\"upvote__img\" />\n      </button>\n      <div className=\"vote-count\">{count}</div>\n      <button className=\"vote-btn\" name=\"downvote\" onClick={handleVote}>\n        <DownArrow className=\"downvote__img\" />\n      </button>\n    </div>\n  );\n}\n\nVote.defaultProps = {\n  voteCount: 0,\n  voteStatus: 0,\n  updateVote: () => {}\n}\n\nVote.propTypes = {\n  voteCount: PropTypes.number,\n  voteStatus: PropTypes.oneOf([-1, 0, 1]),\n  updateVote: PropTypes.func\n};\n\nexport default Vote;\n","import React from 'react'\nimport Vote from \"../vote/Vote\";\n\nfunction Post({title}) {\n  function updateVote(type) {}\n  return (\n    <div className=\"Post\">\n      <Vote voteCount={5} voteStatus={1} updateVote={updateVote} />\n      <h1>{title}</h1>\n    </div>\n  );\n}\n\nexport default Post","import React, {useEffect} from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchData, selectListing, selectAfter } from '../../store/subredditSlice';\nimport Post from '../../common/post/Post'\n\nfunction SearchPage() {\n  const listing = useSelector(selectListing) \n  const after = useSelector(selectAfter) \n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(fetchData({sortBy: 'hot', after}))\n  }, [])\n\n  return (\n    <section className=\"threads-list\">\n      {\n        listing.map((post) => <Post title={post.title} />)\n      }\n    </section>\n  )\n}\n\nexport default SearchPage;\n","import React from \"react\";\n\nfunction ThreadPage() {\n  return (\n    <div>Thread</div>\n  );\n}\n\nexport default ThreadPage;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchPage from './pages/search/SearchPage'\nimport ThreadPage from './pages/thread/ThreadPage'\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" exact>\n            <SearchPage />\n          </Route>\n          <Route path=\"/thread\">\n            <ThreadPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport subredditReducer from './subredditSlice';\n\nexport const store = configureStore({\n  reducer: {\n    subreddit: subredditReducer \n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}